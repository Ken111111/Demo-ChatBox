// script.js

// --- D·ªÆ LI·ªÜU Q&A C·ª¶A B·∫†N (Gi·ªØ nguy√™n ho·∫∑c c·∫≠p nh·∫≠t) ---
const knowledgeBase = [
    {
        keywords: ["b·∫°n l√† ai", "t√™n g√¨", "gi·ªõi thi·ªáu b·∫£n th√¢n", "quang l√† ai"],
        answer: "Ch√†o b·∫°n, t√¥i l√† Nguy·ªÖn Tu·∫•n Quang, m·ªôt K·ªπ s∆∞ chuy√™n ng√†nh T·ª± ƒê·ªông H√≥a. R·∫•t vui ƒë∆∞·ª£c l√†m quen!",
    },
    // ... (Th√™m c√°c c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi kh√°c c·ªßa b·∫°n ·ªü ƒë√¢y) ...
    {
        keywords: ["c·∫£m ∆°n", "thank you", "c√°m ∆°n","oke"],
        answer: "R·∫•t vui khi ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n! üòä"
    },
];

const fallbackAnswers = [
    "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ di·ªÖn ƒë·∫°t kh√°c ƒë∆∞·ª£c kh√¥ng?",
    "Hi·ªán t·∫°i m√¨nh ch∆∞a c√≥ th√¥ng tin v·ªÅ v·∫•n ƒë·ªÅ n√†y. B·∫°n th·ª≠ h·ªèi c√¢u kh√°c nh√©.",
];
// --- K·∫æT TH√öC D·ªÆ LI·ªÜU Q&A ---

// Bi·∫øn l∆∞u tr·ªØ l·ªãch s·ª≠ chat cho API (quan tr·ªçng!)
// ƒê·ªãnh d·∫°ng: [{ role: "user", parts: [{text: "..."}] }, { role: "model", parts: [{text: "..."}] }]
let chatHistoryForAPI = [];


document.addEventListener('DOMContentLoaded', function() {
    const chatbox = document.getElementById('aiChatbox');
    const chatboxHeader = document.getElementById('chatboxHeader');
    // S·ª≠a l·∫°i c√°ch l·∫•y chatboxToggleIcon n·∫øu n√≥ n·∫±m tr·ª±c ti·∫øp trong chatboxHeader
    // Ho·∫∑c ƒë·∫£m b·∫£o HTML c·ªßa b·∫°n c√≥ m·ªôt element con v·ªõi ID/class ph√π h·ª£p cho icon
    const chatboxToggleIconElement = document.getElementById('chatboxToggleIcon'); // Gi·∫£ s·ª≠ ƒë√¢y l√† span ch·ª©a icon
    const chatboxToggleIcon = chatboxToggleIconElement ? chatboxToggleIconElement.querySelector('i') : null;

    // L·∫•y c√°c ph·∫ßn t·ª≠ cho vi·ªác chat
    const chatMessages = document.getElementById('chatMessages');
    const userInput = document.getElementById('userInput');
    const sendMessageBtn = document.getElementById('sendMessageBtn');


    // --- PH·∫¶N LOGIC TOGGLE CHATBOX (Code c·ªßa b·∫°n - gi·ªØ nguy√™n v√† ƒëi·ªÅu ch·ªânh n·∫øu c·∫ßn) ---
    if (chatbox && chatboxToggleIcon) { // Ki·ªÉm tra chatbox v√† icon t·ªìn t·∫°i
        const isInitiallyCollapsed = chatbox.classList.contains('collapsed');
        if (isInitiallyCollapsed) {
            chatboxToggleIcon.classList.remove('fa-chevron-up');
            chatboxToggleIcon.classList.add('fa-chevron-down');
        } else {
            chatboxToggleIcon.classList.remove('fa-chevron-down');
            chatboxToggleIcon.classList.add('fa-chevron-up');
        }

        if (chatboxHeader) {
            chatboxHeader.addEventListener('click', function() {
                chatbox.classList.toggle('collapsed');

                if (chatbox.classList.contains('collapsed')) {
                    chatboxToggleIcon.classList.remove('fa-chevron-up');
                    chatboxToggleIcon.classList.add('fa-chevron-down');
                    if (window.innerWidth <= 480 && chatbox.classList.contains('fullscreen-mobile')) {
                        chatbox.classList.remove('fullscreen-mobile');
                    }
                } else {
                    chatboxToggleIcon.classList.remove('fa-chevron-down');
                    chatboxToggleIcon.classList.add('fa-chevron-up');
                    if (window.innerWidth <= 480) {
                        // chatbox.classList.add('fullscreen-mobile'); // T√πy ch·ªçn
                    }
                }
            });
        }
    }

    // X·ª≠ l√Ω resize (Code c·ªßa b·∫°n - gi·ªØ nguy√™n)
    window.addEventListener('resize', function() {
        if (chatbox && window.innerWidth > 480 && chatbox.classList.contains('fullscreen-mobile')) {
            chatbox.classList.remove('fullscreen-mobile');
        }
    });
    // --- K·∫æT TH√öC LOGIC TOGGLE CHATBOX ---


    // --- PH·∫¶N LOGIC X·ª¨ L√ù CHAT (TH√äM V√ÄO T·ª™ H∆Ø·ªöNG D·∫™N API) ---
    function addMessageToChat(text, senderClass) {
        if (!chatMessages) { // Ki·ªÉm tra xem chatMessages c√≥ t·ªìn t·∫°i kh√¥ng
            console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #chatMessages ƒë·ªÉ th√™m tin nh·∫Øn.");
            return;
        }

        const messageDiv = document.createElement('div');
        if (senderClass !== 'bot-typing') {
            const existingTypingMessage = chatMessages.querySelector('.bot-typing');
            if (existingTypingMessage) {
                existingTypingMessage.remove();
            }
        }
        
        messageDiv.classList.add('message', senderClass);
        
        const p = document.createElement('p');
        p.textContent = text;
        messageDiv.appendChild(p);
        
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    async function getBotResponse(userText) {
        const lowerUserText = userText.toLowerCase().trim();
        if (lowerUserText === "") return null;

        for (const item of knowledgeBase) {
            for (const keyword of item.keywords) {
                if (lowerUserText.includes(keyword.toLowerCase())) {
                    chatHistoryForAPI.push({ role: "user", parts: [{text: userText}] });
                    chatHistoryForAPI.push({ role: "model", parts: [{text: item.answer}] });
                    if (chatHistoryForAPI.length > 20) {
                        chatHistoryForAPI = chatHistoryForAPI.slice(-20);
                    }
                    return item.answer;
                }
            }
        }

        try {
            addMessageToChat("Bot ƒëang suy nghƒ©...", 'bot-typing');
            const functionUrl = '/.netlify/functions/get-gemini-response'; 
            
            const response = await fetch(functionUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    userMessage: userText,
                    history: chatHistoryForAPI
                }),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ error: "L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ server" }));
                console.error("L·ªói API t·ª´ Netlify Function:", response.status, errorData);
                addMessageToChat(`L·ªói: ${errorData.error || response.statusText}`, 'bot-message');
                return null;
            }

            const data = await response.json();
            chatHistoryForAPI.push({ role: "user", parts: [{text: userText}] });
            chatHistoryForAPI.push({ role: "model", parts: [{text: data.botResponse}] });
            if (chatHistoryForAPI.length > 20) {
                 chatHistoryForAPI = chatHistoryForAPI.slice(-20);
            }
            return data.botResponse;

        } catch (error) {
            console.error("L·ªói khi g·ªçi Netlify function:", error);
            const typingMessage = chatMessages ? chatMessages.querySelector('.bot-typing') : null;
            if (typingMessage) typingMessage.remove();
            addMessageToChat("Xin l·ªói, ƒë√£ c√≥ l·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau.", 'bot-message');
            return null; 
        }
    }

    async function handleSendMessage() {
        if (!userInput) { // Ki·ªÉm tra userInput t·ªìn t·∫°i
            console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #userInput.");
            return;
        }
        const userText = userInput.value.trim();
        if (userText === "") return;

        addMessageToChat(userText, 'user-message');
        userInput.value = "";

        const botText = await getBotResponse(userText);
        if (botText) { 
            addMessageToChat(botText, 'bot-message');
        }
    }

    if (sendMessageBtn && userInput) {
        sendMessageBtn.addEventListener('click', handleSendMessage);
        userInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault(); 
                handleSendMessage();
            }
        });
    } else {
        // Ghi log n·∫øu kh√¥ng t√¨m th·∫•y n√∫t g·ª≠i ho·∫∑c √¥ nh·∫≠p li·ªáu, gi√∫p g·ª° l·ªói HTML
        if (!sendMessageBtn) console.warn("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #sendMessageBtn.");
        if (!userInput) console.warn("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #userInput.");
    }
    // --- K·∫æT TH√öC LOGIC X·ª¨ L√ù CHAT ---
});